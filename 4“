#include <iostream>
#include <algorithm>
#include <limits.h>
using namespace std;

struct TreeNode {
	int val;
	TreeNode *left;
	TreeNode *right;
	TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

bool isValidBSTHelper(TreeNode *node, long long minVal, long long maxVal, int &height) {
	if (node == NULL) {
		height = 0;
		return true;
	}

	// 验证
	if (node->val <= minVal || node->val >= maxVal) {
		return false;
	}

	int leftHeight = 0, rightHeight = 0;

	bool leftIsBST = isValidBSTHelper(node->left, minVal, node->val, leftHeight);
	bool rightIsBST = isValidBSTHelper(node->right, node->val, maxVal, rightHeight);

	// 检查是否符合AVL
	if (!leftIsBST || !rightIsBST) {
		return false;
	}

	// 检查是否在[-1, 1]之间
	if (abs(leftHeight - rightHeight) > 1) {
		return false;
	}

	// 计算高度
	height = max(leftHeight, rightHeight) + 1;

	return true;
}

bool isValidAVLTree(TreeNode *root) {
	int height = 0;
	return isValidBSTHelper(root, LONG_MIN, LONG_MAX, height);
}

TreeNode *insertBST(TreeNode *root, int val) {
	if (root == NULL) {
		return new TreeNode(val);
	}
	if (val < root->val) {
		root->left = insertBST(root->left, val);
	} else if (val > root->val) {
		root->right = insertBST(root->right, val);
	}
	return root;
}

int main() {
	TreeNode *root = NULL;
	int n, value;
	cout << "Enter the number of nodes in the tree: ";
	cin >> n;
	
	cout << "Enter the values of the nodes: " << endl;
	for (int i = 0; i < n; i++) {
		cin >> value;
		root = insertBST(root, value);
	}

	if (isValidAVLTree(root)) {
		cout << "The tree is a valid AVL tree." << endl;
	} else {
		cout << "The tree is not a valid AVL tree." << endl;
	}

	return 0;
}
